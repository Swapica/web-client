/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Swapica {
  export type StatusStruct = {
    state: PromiseOrValue<BigNumberish>;
    executedBy: PromiseOrValue<BigNumberish>;
  };

  export type StatusStructOutput = [number, BigNumber] & {
    state: number;
    executedBy: BigNumber;
  };

  export type OrderStruct = {
    id: PromiseOrValue<BigNumberish>;
    account: PromiseOrValue<string>;
    tokenToSell: PromiseOrValue<string>;
    tokenToBuy: PromiseOrValue<string>;
    amountToSell: PromiseOrValue<BigNumberish>;
    amountToBuy: PromiseOrValue<BigNumberish>;
    destChain: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    account: string;
    tokenToSell: string;
    tokenToBuy: string;
    amountToSell: BigNumber;
    amountToBuy: BigNumber;
    destChain: BigNumber;
  };

  export type MatchStruct = {
    id: PromiseOrValue<BigNumberish>;
    originOrderId: PromiseOrValue<BigNumberish>;
    account: PromiseOrValue<string>;
    tokenToSell: PromiseOrValue<string>;
    amountToSell: PromiseOrValue<BigNumberish>;
    originChain: PromiseOrValue<BigNumberish>;
  };

  export type MatchStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    originOrderId: BigNumber;
    account: string;
    tokenToSell: string;
    amountToSell: BigNumber;
    originChain: BigNumber;
  };
}

export interface SwapicaInterface extends utils.Interface {
  functions: {
    "__Signers_init(address[],uint256)": FunctionFragment;
    "__Swapica_init(address[])": FunctionFragment;
    "addSigners(address[])": FunctionFragment;
    "cancelMatch(bytes,bytes[])": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "createMatch(bytes,bytes[])": FunctionFragment;
    "createOrder(address,uint256,address,uint256,uint256)": FunctionFragment;
    "executeMatch(bytes,bytes[])": FunctionFragment;
    "executeOrder(bytes,bytes[])": FunctionFragment;
    "getActiveOrders(uint256,uint256)": FunctionFragment;
    "getSigners()": FunctionFragment;
    "getUserMatches(address,uint256,uint256)": FunctionFragment;
    "getUserOrders(address,uint256,uint256)": FunctionFragment;
    "locked(address,address)": FunctionFragment;
    "matchStatus(uint256)": FunctionFragment;
    "matches(uint256)": FunctionFragment;
    "orderStatus(uint256)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeSigners(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSignaturesThreshold(uint256)": FunctionFragment;
    "signaturesThreshold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__Signers_init"
      | "__Swapica_init"
      | "addSigners"
      | "cancelMatch"
      | "cancelOrder"
      | "createMatch"
      | "createOrder"
      | "executeMatch"
      | "executeOrder"
      | "getActiveOrders"
      | "getSigners"
      | "getUserMatches"
      | "getUserOrders"
      | "locked"
      | "matchStatus"
      | "matches"
      | "orderStatus"
      | "orders"
      | "owner"
      | "proxiableUUID"
      | "removeSigners"
      | "renounceOwnership"
      | "setSignaturesThreshold"
      | "signaturesThreshold"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Signers_init",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "__Swapica_init",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSigners",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMatch",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMatch",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMatch",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveOrders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMatches",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "matchStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigners",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSignaturesThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signaturesThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Signers_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Swapica_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignaturesThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signaturesThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MatchUpdated(uint256,tuple)": EventFragment;
    "OrderUpdated(uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MatchUpdatedEventObject {
  id: BigNumber;
  status: Swapica.StatusStructOutput;
}
export type MatchUpdatedEvent = TypedEvent<
  [BigNumber, Swapica.StatusStructOutput],
  MatchUpdatedEventObject
>;

export type MatchUpdatedEventFilter = TypedEventFilter<MatchUpdatedEvent>;

export interface OrderUpdatedEventObject {
  id: BigNumber;
  status: Swapica.StatusStructOutput;
}
export type OrderUpdatedEvent = TypedEvent<
  [BigNumber, Swapica.StatusStructOutput],
  OrderUpdatedEventObject
>;

export type OrderUpdatedEventFilter = TypedEventFilter<OrderUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Swapica extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapicaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Signers_init(
      signers_: PromiseOrValue<string>[],
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __Swapica_init(
      signers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      tokenToSell: PromiseOrValue<string>,
      amountToSell: PromiseOrValue<BigNumberish>,
      tokenToBuy: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      destChain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeOrder(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Swapica.OrderStructOutput[]] & { result: Swapica.OrderStructOutput[] }
    >;

    getSigners(overrides?: CallOverrides): Promise<[string[]]>;

    getUserMatches(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Swapica.MatchStructOutput[]] & { result: Swapica.MatchStructOutput[] }
    >;

    getUserOrders(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Swapica.OrderStructOutput[]] & { result: Swapica.OrderStructOutput[] }
    >;

    locked(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    matchStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { state: number; executedBy: BigNumber }>;

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        id: BigNumber;
        originOrderId: BigNumber;
        account: string;
        tokenToSell: string;
        amountToSell: BigNumber;
        originChain: BigNumber;
      }
    >;

    orderStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { state: number; executedBy: BigNumber }>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        account: string;
        tokenToSell: string;
        tokenToBuy: string;
        amountToSell: BigNumber;
        amountToBuy: BigNumber;
        destChain: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSignaturesThreshold(
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signaturesThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __Signers_init(
    signers_: PromiseOrValue<string>[],
    signaturesThreshold_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __Swapica_init(
    signers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSigners(
    signers_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelMatch(
    orderData: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMatch(
    orderData: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    tokenToSell: PromiseOrValue<string>,
    amountToSell: PromiseOrValue<BigNumberish>,
    tokenToBuy: PromiseOrValue<string>,
    amountToBuy: PromiseOrValue<BigNumberish>,
    destChain: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeMatch(
    orderData: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeOrder(
    orderData: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveOrders(
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Swapica.OrderStructOutput[]>;

  getSigners(overrides?: CallOverrides): Promise<string[]>;

  getUserMatches(
    user: PromiseOrValue<string>,
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Swapica.MatchStructOutput[]>;

  getUserOrders(
    user: PromiseOrValue<string>,
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Swapica.OrderStructOutput[]>;

  locked(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matchStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { state: number; executedBy: BigNumber }>;

  matches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      id: BigNumber;
      originOrderId: BigNumber;
      account: string;
      tokenToSell: string;
      amountToSell: BigNumber;
      originChain: BigNumber;
    }
  >;

  orderStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { state: number; executedBy: BigNumber }>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      account: string;
      tokenToSell: string;
      tokenToBuy: string;
      amountToSell: BigNumber;
      amountToBuy: BigNumber;
      destChain: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeSigners(
    signers_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSignaturesThreshold(
    signaturesThreshold_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signaturesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __Signers_init(
      signers_: PromiseOrValue<string>[],
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    __Swapica_init(
      signers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      tokenToSell: PromiseOrValue<string>,
      amountToSell: PromiseOrValue<BigNumberish>,
      tokenToBuy: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      destChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeOrder(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Swapica.OrderStructOutput[]>;

    getSigners(overrides?: CallOverrides): Promise<string[]>;

    getUserMatches(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Swapica.MatchStructOutput[]>;

    getUserOrders(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Swapica.OrderStructOutput[]>;

    locked(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { state: number; executedBy: BigNumber }>;

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        id: BigNumber;
        originOrderId: BigNumber;
        account: string;
        tokenToSell: string;
        amountToSell: BigNumber;
        originChain: BigNumber;
      }
    >;

    orderStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { state: number; executedBy: BigNumber }>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        account: string;
        tokenToSell: string;
        tokenToBuy: string;
        amountToSell: BigNumber;
        amountToBuy: BigNumber;
        destChain: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSignaturesThreshold(
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signaturesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MatchUpdated(uint256,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      status?: Swapica.StatusStruct | null
    ): MatchUpdatedEventFilter;
    MatchUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      status?: Swapica.StatusStruct | null
    ): MatchUpdatedEventFilter;

    "OrderUpdated(uint256,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      status?: Swapica.StatusStruct | null
    ): OrderUpdatedEventFilter;
    OrderUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      status?: Swapica.StatusStruct | null
    ): OrderUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    __Signers_init(
      signers_: PromiseOrValue<string>[],
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __Swapica_init(
      signers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrder(
      tokenToSell: PromiseOrValue<string>,
      amountToSell: PromiseOrValue<BigNumberish>,
      tokenToBuy: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      destChain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeOrder(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigners(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMatches(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOrders(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSignaturesThreshold(
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signaturesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Signers_init(
      signers_: PromiseOrValue<string>[],
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __Swapica_init(
      signers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      tokenToSell: PromiseOrValue<string>,
      amountToSell: PromiseOrValue<BigNumberish>,
      tokenToBuy: PromiseOrValue<string>,
      amountToBuy: PromiseOrValue<BigNumberish>,
      destChain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeMatch(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeOrder(
      orderData: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveOrders(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserMatches(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOrders(
      user: PromiseOrValue<string>,
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSigners(
      signers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSignaturesThreshold(
      signaturesThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signaturesThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
